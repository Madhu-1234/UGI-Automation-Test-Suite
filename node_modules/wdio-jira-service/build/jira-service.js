'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _jira = require('./jira.js');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var JiraService = function () {
    function JiraService() {
        _classCallCheck(this, JiraService);
    }

    _createClass(JiraService, [{
        key: 'after',

        /**
         * update Jira Ticket
         */
        value: function after(failures) {
            var boundTransition = _jira.transitionIssue.bind(null, browser.options.jiraConfig.username, browser.options.jiraConfig.password, browser.options.jiraConfig.host, global.jiraIssue);

            if (failures !== 0) {
                return boundTransition(browser.options.jiraConfig.failureId, browser.options.jiraConfig.failureMessage);
            } else {
                return boundTransition(browser.options.jiraConfig.successId, browser.options.jiraConfig.successMessage);
            }
        }
    }]);

    return JiraService;
}();

exports.default = JiraService;
