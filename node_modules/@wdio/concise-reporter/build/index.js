"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reporter = _interopRequireDefault(require("@wdio/reporter"));

var _chalk = _interopRequireDefault(require("chalk"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class ConciseReporter extends _reporter.default {
  constructor(options) {
    options = Object.assign(options, {
      stdout: true
    });
    super(options);
    this.suiteUids = [];
    this.suites = [];
    this.stateCounts = {
      failed: 0
    };
    this.chalk = _chalk.default;
  }

  onSuiteStart(suite) {
    this.suiteUids.push(suite.uid);
  }

  onSuiteEnd(suite) {
    this.suites.push(suite);
  }

  onTestFail() {
    this.stateCounts.failed++;
  }

  onRunnerEnd(runner) {
    this.printReport(runner);
  }

  printReport(runner) {
    const header = this.chalk.yellow('========= Your concise report ==========');
    const output = [this.getEnviromentCombo(runner.capabilities), this.getCountDisplay(), ...this.getFailureDisplay()];
    this.write(`${header}\n${output.join('\n')}\n`);
  }

  getCountDisplay() {
    const failedTestsCount = this.stateCounts.failed;
    return failedTestsCount > 0 ? `Test${failedTestsCount > 1 ? 's' : ''} failed (${failedTestsCount}):` : 'All went well !!';
  }

  getFailureDisplay() {
    const output = [];
    this.getOrderedSuites().map(suite => suite.tests.map(test => {
      if (test.state === 'failed') {
        output.push(`  Fail : ${this.chalk.red(test.title)}`, `    ${test.error.type} : ${this.chalk.yellow(test.error.message)}`);
      }
    }));
    return output;
  }

  getOrderedSuites() {
    this.orderedSuites = [];
    this.suiteUids.map(uid => this.suites.map(suite => {
      if (suite.uid === uid) {
        this.orderedSuites.push(suite);
      }
    }));
    return this.orderedSuites;
  }

  getEnviromentCombo(caps) {
    const device = caps.deviceName;
    const browser = caps.browserName || caps.browser;
    const version = caps.version || caps.platformVersion || caps.browser_version;
    const platform = caps.os ? caps.os + ' ' + caps.os_version : caps.platform || caps.platformName;

    if (device) {
      const program = (caps.app || '').replace('sauce-storage:', '') || caps.browserName;
      const executing = program ? `executing ${program}` : '';
      return `${device} on ${platform} ${version} ${executing}`.trim();
    }

    return browser + (version ? ` (v${version})` : '') + (platform ? ` on ${platform}` : '');
  }

}

exports.default = ConciseReporter;